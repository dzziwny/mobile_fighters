# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Dart

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: dart-lang/setup-dart@v1
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      # # Core
      # - name: Build core
      #   working-directory: ./core
      #   run: |
      #     dart pub get
      #     dart run build_runner build --delete-conflicting-outputs
          
      # # Server
      # - name: Build server
      #   working-directory: ./server
      #   run: |
      #     dart pub get
      #     dart run build_runner build --delete-conflicting-outputs
          
      # # App
      # - name: Build web
      #   working-directory: ./app
      #   run: |
      #     flutter pub get
      #     flutter pub run build_runner build --delete-conflicting-outputs
      #     flutter build web --release

      # # Analyze with dart
      # - name: Verify formatting
      #   run: dart format --output=none --set-exit-if-changed .
      # - name: Analyze project source
      #   run: dart analyze

      # Your project will need to have tests in test/ and a dependency on
      # package:test for this step to succeed. Note that Flutter projects will
      # want to change this to 'flutter test'.
      # - name: Run tests
      #   run: dart test

      - name: Share context to the next jobs
        uses: actions/upload-artifact@v4
        with:
          name: context
          path: .
  
  push-api-image-to-github-docker-registry:
    runs-on: ubuntu-latest
    if: false
    
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4
      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag mf:$(date +%s)

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
    
  build-and-push-to-firebase:
    runs-on: ubuntu-latest
    needs: build
    if: false

    steps:
      - uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_MOBILE_FIGHTERS }}'
          channelId: live
          projectId: mobile-fighters

  compile-and-upload-api-artifact:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/download-artifact@v3
        with:
          name: context
          
      - name: Compile server
        run: dart compile aot-snapshot server/bin/main.dart --output mobile_fighters_api.aot
  
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4.1.0
        with:
          name: mobile_fighters_api.aot
          path: mobile_fighters_api.aot
          if-no-files-found: error
          compression-level: 0

      
    
          
